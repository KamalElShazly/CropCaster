{
  "name": "Youtube Video Handler",
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"source\": {\n    \"_id\": \"68c0c9933137323932dc9cb9\",\n    \"source_id\": \"modern_agriculture_youtube\",\n    \"name_ar\": \"قناة الزراعة الحديثة\",\n    \"name_en\": \"Modern Agriculture Channel\",\n    \"type\": \"youtube\",\n    \"url\": \"https://www.youtube.com/channel/UCUahHBzRfv4N5fvTy2UJ9qQ\",\n    \"chanel_id\": \"UCUahHBzRfv4N5fvTy2UJ9qQ\"\n  },\n  \"video\": {\n    \"title\": \"💰 الحقيقة الكاملة عن سعر السمسم النهارده | تبيع ولا تستنى؟\",\n    \"link\": \"https://www.youtube.com/watch?v=Mezwl0OVkGU\",\n    \"pubDate\": \"2025-09-21T04:00:26.000Z\",\n    \"author\": \"الزراعة الحديثة\",\n    \"id\": \"yt:video:Mezwl0OVkGU\",\n    \"isoDate\": \"2025-09-21T04:00:26.000Z\"\n  }\n}"
      },
      "id": "b6b39f3a-ddf6-4cf5-8d41-583fceb41b4e",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -1200,
        48
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8278becc-21a3-4bef-a9ae-a7f9111e4385",
              "leftValue": "={{ $json.isValid }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -32,
        32
      ],
      "id": "ff91b2d3-24f2-4696-9486-4dbeac1e684e",
      "name": "Check source is valid"
    },
    {
      "parameters": {
        "jsCode": "const json = $(\"Set Video Data\").first().json;\n// Content Relevance Filter with Arabic Text Normalization\nconst title = json.video.title || \"\";\n\n// Normalize Arabic text to handle different forms of the same letters\nfunction normalizeArabic(text) {\n  return text\n    .replace(/[أإآ]/g, \"ا\") // Normalize alef variations\n    .replace(/[ة]/g, \"ه\") // Normalize ta marbuta\n    .replace(/[ي]/g, \"ي\") // Normalize ya variations\n    .replace(/[ؤ]/g, \"و\") // Normalize waw with hamza\n    .replace(/[ئ]/g, \"ي\") // Normalize ya with hamza\n    .replace(/[ء]/g, \"\") // Remove hamza\n    .replace(/\\s+/g, \" \") // Normalize spaces\n    .trim()\n    .toLowerCase();\n}\n\n// Normalize the input text\nconst normalizedTitle = normalizeArabic(title);\n\n// Keywords that indicate rice/barley price content (normalized)\nconst relevantKeywords = [\n  \"اسعار\",\n  \"ارز\",\n  \"شعير\",\n  \"اسعار اليوم\",\n  \"اسعار الارز\",\n  \"اسعار الشعير\",\n  \"اسعار الارز اليوم\",\n  \"اسعار الشعير اليوم\",\n  \"سعر الارز\",\n  \"سعر الشعير\",\n  \"اسعار الحبوب\",\n  \"اسعار المحاصيل\",\n  \"اسعار الارز الابيض\",\n  \"اسعار الشعير العريض\",\n  \"اسعار الشعير الرفيع\",\n  \"اسعار الارز الابيض العريض\",\n  \"اسعار الارز الابيض الرفيع\",\n  \"اسعار الشعير العريض\",\n  \"اسعار الشعير الرفيع\",\n  \"اسعار اليوم\",\n  \"اسعار السوق\",\n  \"اسعار الحبوب اليوم\",\n];\n\n// Get matched keywords in single pass\nconst matchedKeywords = relevantKeywords.filter(\n  (keyword) =>\n    normalizedTitle.includes(keyword)\n);\n\n// Calculate relevance score and determine if relevant\nconst relevanceScore = Math.min(100, matchedKeywords.length * 20);\nconst isRelevant = relevanceScore > 0;\n\n// Add relevance analysis as a structured object\njson.relevance = {\n  isRelevant: isRelevant,\n  relevanceScore: relevanceScore,\n  matchedKeywords: matchedKeywords,\n  originalTitle: title,\n  normalizedTitle: normalizedTitle,\n  totalKeywordsChecked: relevantKeywords.length,\n  matchedKeywordsCount: matchedKeywords.length,\n};\n\nreturn json;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        16
      ],
      "id": "04c68614-6ee0-4efa-9191-eb24b1a81a26",
      "name": "Calculate Relevance"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7d947ddb-ea5f-444f-b75c-f82bfd73f271",
              "leftValue": "={{ $json.relevance.isRelevant }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        448,
        16
      ],
      "id": "01afafbf-7dd1-4790-9d1f-ac5a380f90d1",
      "name": "Check Relevance"
    },
    {
      "parameters": {
        "jsCode": "// Process merged results from both MongoDB queries\nconst rejectedResults = $input.first().json; // Results from rejected_videos query\nconst processedResults = $input.last().json; // Results from processed_sources query\n\n// Check if video was found in either collection\nconst isRejected = rejectedResults && Object.keys(rejectedResults).length > 0;\nconst isProcessed = processedResults && Object.keys(processedResults).length > 0;\n\nreturn { isValid: !isRejected && !isProcessed };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        32
      ],
      "id": "f7520e96-8c67-4a58-9d44-574d5f06ef16",
      "name": "Check video validity"
    },
    {
      "parameters": {
        "jsCode": "const json = $(\"Set Video Data\").first().json;\nreturn [\n  {\n    source_id: json.source.source_id,\n    video_id: json.video.videoId,\n    publish_date: json.video.pubDate,\n    processing_date: new Date().toISOString(),\n    status: 'rejected'\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        112
      ],
      "id": "184aadba-e46e-45a1-8d80-3c0fdb1446ac",
      "name": "Set rejected source data"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=python3 /scripts/get_transcript.py {{ $json.video.videoId }}"
      },
      "name": "Get Transcript",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        976,
        -160
      ],
      "id": "e3c4fc2b-7563-4348-a9b7-81fa9e7ed43b"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "l3Ot7Z5JeVUM2j1R",
          "mode": "list",
          "cachedResultName": "Insert Processed Source"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "source_id": "={{ $json.source_id }}",
            "video_id": "={{ $json.video_id }}",
            "publish_date": "={{ $json.publish_date }}",
            "processing_date": "={{ $json.processing_date }}",
            "status": "={{ $json.status }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "source_id",
              "displayName": "source_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "video_id",
              "displayName": "video_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "post_url",
              "displayName": "post_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "publish_date",
              "displayName": "publish_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "processing_date",
              "displayName": "processing_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        912,
        112
      ],
      "id": "358a8f85-799f-43ba-9640-f7d2a58bdcbb",
      "name": "Insert Rejected Video Source"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "WuXViPjpfbejoAQ2",
          "mode": "list",
          "cachedResultName": "Extract Prices"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "text": "={{ $json.text }}"
          },
          "matchingColumns": [
            "text"
          ],
          "schema": [
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1872,
        -240
      ],
      "id": "17b1353c-203e-4cd8-ac14-6601f15f4fbe",
      "name": "Extract Prices"
    },
    {
      "parameters": {
        "jsCode": "const url = $input.first().json.video.link\nlet videoId = null;\nlet isShort = false\n\nif (url.includes(\"watch?v=\")) {\n  // Normal YouTube video\n  videoId = url.split(\"v=\")[1].split(\"&\")[0];\n} else if (url.includes(\"shorts/\")) {\n  // YouTube Shorts\n  videoId = url.split(\"shorts/\")[1].split(\"?\")[0];\n  isShort = true;\n}\n\nvar json = $input.first().json;\njson.video.videoId = videoId;\njson.video.isShort = isShort;\nreturn json;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        48
      ],
      "id": "155d1400-d91b-433c-bbd6-f073718141bb",
      "name": "Set Video Data"
    },
    {
      "parameters": {
        "amount": 30
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2720,
        -256
      ],
      "id": "bd6f94e2-05d9-49a3-998f-2a1a17f6abdf",
      "name": "Wait",
      "webhookId": "029d3b57-4aa9-424f-acf4-a2b2495073f2"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "IGreB8Q59lfgy9WR",
          "mode": "list",
          "cachedResultName": "Send results to slack"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "text": "={{ $json.text }}",
            "results": "={{ $json.results }}",
            "video": "={{ $json.video }}",
            "source": "={{ $json.source }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "results",
              "displayName": "results",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array"
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            },
            {
              "id": "video",
              "displayName": "video",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            },
            {
              "id": "post",
              "displayName": "post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            },
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2496,
        -256
      ],
      "id": "12268253-a536-4395-ba64-eb63bf569191",
      "name": "Send results to slack"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const text = $(\"Set text data\").item.json.text;\nconst results = $json.data;\nconst videoData = $(\"Set Video Data\").item.json;\n\nreturn {\n  \"results\": results,\n  \"source\": videoData.source,\n  \"video\": videoData.video,\n  \"post\": null,\n  \"text\": text,\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        -256
      ],
      "id": "c5418efa-5dff-4763-8399-c2865279ed17",
      "name": "Set slack data"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f5cdfd21-db0f-4302-b0f0-cc9907fb8943",
              "leftValue": "={{ $json.has_prices }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2080,
        -240
      ],
      "id": "681fe9ac-ba07-435c-8b08-64872d7849f9",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "return JSON.parse($input.first().json.stdout);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        -160
      ],
      "id": "e664dba5-ee4b-4d5d-a40f-e4697f1d8830",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "39fd3644-8187-455e-8fd0-80bc4cefdb39",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1344,
        -160
      ],
      "id": "255cab34-1b81-40d8-b2be-c4347b039d35",
      "name": "If1"
    },
    {
      "parameters": {
        "collection": "processed_sources",
        "options": {},
        "query": "={\n  \"source_id\": \"{{ $json.source.source_id }}\",\n  \"video_id\": \"{{ $json.video.videoId }}\"\n}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -768,
        48
      ],
      "id": "ce895418-cc5b-4d35-99b3-ca248d95274f",
      "name": "Find source in processed sources1",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "atuQlsTpZSEKAHMP",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8278becc-21a3-4bef-a9ae-a7f9111e4385",
              "leftValue": "={{ $json._id }}",
              "rightValue": 0,
              "operator": {
                "type": "object",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -544,
        48
      ],
      "id": "5f070987-58e7-4704-a74d-deb5101956ec",
      "name": "Check source is valid1"
    },
    {
      "parameters": {
        "amount": 30
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1328,
        112
      ],
      "id": "444742c1-a81b-42f6-88db-f94c0fe0306c",
      "name": "Wait1",
      "webhookId": "837768d8-7a6a-422b-8c05-0f8b3e8c6c87"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "50b57d86-cad3-4c4f-8524-79a7ef9fac61",
              "leftValue": "={{ $json.video.isShort }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "7c3a5aa7-24dc-4e52-9b47-48a70ccee137",
              "leftValue": "={{ $json.source.source_id }}",
              "rightValue": "reda_meshref_youtube",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        672,
        -272
      ],
      "id": "adc9b4ca-19c6-480e-a832-779098c41132",
      "name": "If2"
    },
    {
      "parameters": {
        "url": "=https://api.ocr.space/parse/imageurl",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "=https://img.youtube.com/vi/{{ $json.video.videoId }}/maxresdefault.jpg"
            },
            {
              "name": "language",
              "value": "ara"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        976,
        -416
      ],
      "id": "23f21cc4-3131-4595-b3b1-4add04188c9a",
      "name": "HTTP Request1",
      "credentials": {
        "httpQueryAuth": {
          "id": "uQvFcF88zrjAbEWH",
          "name": "Query Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6d035891-fdc5-4c6d-982b-79828923811c",
              "leftValue": "={{ $json.ParsedResults[0].ParsedText }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1216,
        -416
      ],
      "id": "53e58d52-9fc0-40f5-a822-a5b8c7db700c",
      "name": "If3"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const json = $input.item.json;\nconst text = json.transcript || json.ParsedResults[0].ParsedText;\n\nreturn {\n  \"text\": text\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1648,
        -240
      ],
      "id": "9e328c9a-73b2-4e73-949e-a96152fa3bb2",
      "name": "Set text data"
    }
  ],
  "pinData": {
    "Extract Prices": [
      {
        "json": {
          "confidence": 98,
          "has_prices": true,
          "data": [
            {
              "type": "broad_white_rice",
              "min_price": 24700,
              "max_price": 25000
            },
            {
              "type": "small_white_rice",
              "min_price": 18700,
              "max_price": 19000
            },
            {
              "type": "broad_barely_rice",
              "min_price": 15200,
              "max_price": 15500
            },
            {
              "type": "small_barely_rice",
              "min_price": 12200,
              "max_price": 12600
            }
          ]
        }
      }
    ],
    "When Executed by Another Workflow": [
      {
        "json": {
          "source": {
            "_id": "68be34b7640d69967ca3e81b",
            "source_id": "reda_meshref_youtube",
            "name_ar": "قناة رضا مشرف",
            "name_en": "Reda Meshref Channel",
            "type": "youtube",
            "url": "https://www.youtube.com/channel/UCZHHlx_dBZIl-R7ZE2WxFWw",
            "chanel_id": "UCZHHlx_dBZIl-R7ZE2WxFWw"
          },
          "video": {
            "title": "اليوم السبت 2025/10/4 اسعار الارز الشعير والأبيض والمخلفات",
            "link": "https://www.youtube.com/shorts/ljWNKv90K3w",
            "pubDate": "2025-10-04T03:34:51.000Z",
            "author": " رضا مشرف لاسعار الارز والمخلفات ",
            "id": "yt:video:ljWNKv90K3w",
            "isoDate": "2025-10-04T03:34:51.000Z",
            "videoId": "ljWNKv90K3w"
          }
        }
      }
    ],
    "HTTP Request1": [
      {
        "json": {
          "ParsedResults": [
            {
              "TextOverlay": {
                "Lines": [],
                "HasOverlay": false,
                "Message": "Text overlay is not provided as it is not requested"
              },
              "TextOrientation": "0",
              "FileParseExitCode": 1,
              "ParsedText": "ل \r\nاسعار الارز والمخلفات داخل كفر الشيخ \r\nالأسعار حسب التصفيه ونسبة الكسر تصفيه \r\nعريض 0&700/680 وفي الرفيع 670/650 \r\nونسبة الكسر لاتتخطي ال 25% عريض ورفيع \r\nاسعار الأرز الشعير \r\nشعير عريض 16000/15800 وصال المضارب \r\nشعير رفيع 13700/13500 وصال المضارب \r\nاسعار الارز الأبيض \r\nابيض عريض 25000/24800 ارض المضرب \r\nابيض رفيع 21200/21000 ارض المضرب \r\nاسعار المخلفات \r\nسرس مطحون 1700/1500 ارض المضرب \r\nالكون 13400/13200 ارض المضرب \r\nالناعم 13700/13500 \r\nالمضرب \r\n",
              "ErrorMessage": "",
              "ErrorDetails": ""
            }
          ],
          "OCRExitCode": 1,
          "IsErroredOnProcessing": false,
          "ProcessingTimeInMilliseconds": "359",
          "SearchablePDFURL": "Searchable PDF not generated as it was not requested."
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Set Video Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check source is valid": {
      "main": [
        [
          {
            "node": "Calculate Relevance",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Calculate Relevance": {
      "main": [
        [
          {
            "node": "Check Relevance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Relevance": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set rejected source data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check video validity": {
      "main": [
        [
          {
            "node": "Check source is valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set rejected source data": {
      "main": [
        [
          {
            "node": "Insert Rejected Video Source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Transcript": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Rejected Video Source": {
      "main": [
        []
      ]
    },
    "Extract Prices": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Video Data": {
      "main": [
        [
          {
            "node": "Find source in processed sources1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send results to slack": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set slack data": {
      "main": [
        [
          {
            "node": "Send results to slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Set slack data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set rejected source data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Set text data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find source in processed sources1": {
      "main": [
        [
          {
            "node": "Check source is valid1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check source is valid1": {
      "main": [
        [
          {
            "node": "Check video validity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Set rejected source data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Set text data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set rejected source data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set text data": {
      "main": [
        [
          {
            "node": "Extract Prices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "05845a03-a5ad-41d2-b781-9c2e653af96c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e0610107ac554f59b63883651795eb0400bfcc59bc18a9994fa27c06a3158c7b"
  },
  "id": "zT5Wr9Iv9XAin0dh",
  "tags": []
}