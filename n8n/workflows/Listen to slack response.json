{
  "name": "Listen to slack response",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0cf71861-712a-4764-aadb-b76f81486167",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -752,
        144
      ],
      "id": "ebcdf6c2-2165-4e36-bcd6-47672084df4c",
      "name": "Webhook",
      "webhookId": "0cf71861-712a-4764-aadb-b76f81486167"
    },
    {
      "parameters": {
        "jsCode": "const value = $input.first().json.value;\nconst cropCategoryId = \"rice\";\nvar publish_date;\n\nswitch (value.source.type) {\n  case \"youtube\":\n    publish_date = value.video.pubDate;\n    break;\n  case \"news\":\n    publish_date = new Date(value.post.publish_date).toISOString();\n    break;\n  default:\n    throw new Error('Unknown source type');\n}\n\nreturn value.results.map((item) => ({\n  json: {\n    source_id: value.source.source_id,\n    crop_category_id: cropCategoryId,\n    crop_type_id: item.type,\n    min_price: item.min_price,\n    max_price: item.max_price,\n    publish_date: publish_date,\n    processing_date: new Date().toISOString(),\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        -416
      ],
      "id": "5a1322e6-9b46-457d-a9f5-ba9acecfec1f",
      "name": "Set prices data"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "MT7mAwC2Uj8VDrXJ",
          "mode": "list",
          "cachedResultName": "Insert Prices"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "min_price": "={{ $json.min_price }}",
            "max_price": "={{ $json.max_price }}",
            "source_id": "={{ $json.source_id }}",
            "crop_category_id": "={{ $json.crop_category_id }}",
            "crop_type_id": "={{ $json.crop_type_id }}",
            "publish_date": "={{ $json.publish_date }}",
            "processing_date": "={{ $json.processing_date }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "source_id",
              "displayName": "source_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "crop_category_id",
              "displayName": "crop_category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "crop_type_id",
              "displayName": "crop_type_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "min_price",
              "displayName": "min_price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "max_price",
              "displayName": "max_price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "publish_date",
              "displayName": "publish_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "processing_date",
              "displayName": "processing_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        880,
        -416
      ],
      "id": "4f97e783-4b19-42af-a207-d83e63685869",
      "name": "Insert Prices"
    },
    {
      "parameters": {
        "jsCode": "const value = $input.first().json.value;\nvar video_id;\nvar post_url;\nvar publish_date;\n\nswitch (value.source.type) {\n  case \"youtube\":\n    video_id = value.video.videoId;\n    publish_date = value.video.pubDate;\n    break;\n  case \"news\":\n    post_url = value.post.url;\n    publish_date = new Date(value.post.publish_date).toISOString();\n    break;\n  default:\n    throw new Error('Unknown source type');\n}\n\nreturn [\n  {\n    source_id: value.source.source_id,\n    video_id: video_id,\n    post_url: post_url,\n    publish_date: publish_date,\n    processing_date: new Date().toISOString(),\n    status: 'processed'\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        -240
      ],
      "id": "fd57092b-5af5-400c-850e-a096d9a47ff2",
      "name": "Set processed source"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1168,
        -320
      ],
      "id": "1faf4819-7a1e-4858-ae63-7a642eddb0c8",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const switchData = $(\"Switch action value\").item.json;\nconst triggerId = switchData.payload.trigger_id;\nconst fileId = switchData.value.file_id;\nconst messageTs = switchData.payload.message.ts;\nconst input = $input.first().json;\nconst chunkSize = 2500; // slightly below Slack limit (3000)\nconst chunks = [];\n\n// Split transcript into chunks\nfor (let i = 0; i < input.text.length; i += chunkSize) {\n  chunks.push(input.text.substring(i, i + chunkSize));\n}\n\nconst transcriptBlocks = chunks.map((chunk) => ({\n  type: \"section\",\n  text: {\n    type: \"mrkdwn\",\n    text: `\\`\\`\\`${chunk}\\`\\`\\``,\n  },\n}));\n\nvar titleSectionText;\nswitch (input.source.type) {\n  case \"youtube\":\n    titleSectionText = `*Source:* ${input.source.name_en}|${input.source.name_ar}\\n*Video:* <${input.video.link}|${input.video.title}> \\n*Published:* ${input.video.pubDate}>`\n    break;\n  case \"news\":\n    titleSectionText = `*Source:* ${input.source.name_en}|${input.source.name_ar}\\n*Video:* <${input.post.url}|${input.post.title}> \\n*Published:* ${input.post.publish_date}>`\n    break;\n}\n\nconst blocks = [\n  {\n    type: \"section\",\n    text: {\n      type: \"mrkdwn\",\n      text: titleSectionText,\n    },\n  },\n  { type: \"divider\" },\n  {\n    type: \"section\",\n    text: {\n      type: \"mrkdwn\",\n      text: \"*Transcript:*\",\n    },\n  },\n  {\n    type: \"input\",\n    block_id: \"results_block\",\n    element: {\n      type: \"plain_text_input\",\n      multiline: true,\n      action_id: \"results_input\",\n      initial_value: JSON.stringify(input.results, null, 2),\n    },\n    label: {\n      type: \"plain_text\",\n      text: \"AI Results\",\n    },\n  },\n  { type: \"divider\" },\n  ...transcriptBlocks,\n];\n\nconst result = {\n  trigger_id: triggerId,\n  view: {\n    type: \"modal\",\n    callback_id: \"review_modal\",\n    title: {\n      type: \"plain_text\",\n      text: \"Review AI Data\",\n    },\n    private_metadata: JSON.stringify({\n      file_id: fileId,\n      message_ts: messageTs,\n      source: input.source,\n      video: input.video,\n      post: input.post,\n    }),\n    blocks: blocks,\n    submit: {\n      type: \"plain_text\",\n      text: \"Approve\",\n    },\n    close: {\n      type: \"plain_text\",\n      text: \"Cancel\",\n    },\n  },\n};\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        144
      ],
      "id": "9cc5eedf-fc7a-4138-afe8-bde791a77a03",
      "name": "Set slack modal data"
    },
    {
      "parameters": {
        "jsCode": "return JSON.parse($input.first().json.data);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        144
      ],
      "id": "845ccc95-ece1-4842-b4f6-c8ef31579fae",
      "name": "Map response"
    },
    {
      "parameters": {
        "url": "={{ $json.value.file_url }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        144
      ],
      "id": "54f626f9-9190-488c-a46d-8311c0e54ff2",
      "name": "Get file content",
      "credentials": {
        "slackApi": {
          "id": "9ZfOUYa7935pkuZq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://slack.com/api/views.open",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json; charset=utf-8"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1312,
        144
      ],
      "id": "1918f11f-6386-4d4c-b0ed-01d73038f868",
      "name": "Send slack modal",
      "credentials": {
        "slackApi": {
          "id": "9ZfOUYa7935pkuZq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const payload = JSON.parse($json.body.payload);\n\nreturn payload;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -512,
        144
      ],
      "id": "7e5ea2d4-b9ae-40bf-af25-3fa67d35f067",
      "name": "Extract Payload"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "block_actions",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7d54133e-6d1d-4752-bf13-b5abfef8c71a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cd3e9a03-760d-4ee1-815d-04b87eb92a89",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "view_submission",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -288,
        144
      ],
      "id": "579dc0a3-e1a0-4e2e-967e-f1045fd5d00a",
      "name": "Switch payload type"
    },
    {
      "parameters": {
        "jsCode": "const payload = $(\"Extract Payload\").first().json;\nconst value = JSON.parse(payload.actions[0].value);\nconst data = {\n  \"payload\": payload,\n  \"value\": value\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        -48
      ],
      "id": "f7b63ceb-0783-41f3-ac57-5b1ce2408118",
      "name": "Extract action values"
    },
    {
      "parameters": {
        "jsCode": "const payload = $(\"Extract Payload\").first().json;\nconst results = JSON.parse(\n  payload.view.state.values.results_block.results_input.value,\n);\nconst metadata = JSON.parse(payload.view.private_metadata);\n\nconst data = {\n  payload: payload,\n  value: {\n    results: results,\n    file_id: metadata.file_id,\n    message_ts: metadata.message_ts,\n    source: metadata.source,\n    video: metadata.video,\n    post: metadata.post,\n  },\n};\nreturn data;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        336
      ],
      "id": "e194d3c2-72f4-4e21-8618-533b4c770c87",
      "name": "Extract modal values"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.value.action }}",
                    "rightValue": "approve",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2d406dc2-ac3c-4d28-a12f-05867ea9c485"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dedddee8-a02a-43be-b58c-ae980ade5dc9",
                    "leftValue": "={{ $json.value.action }}",
                    "rightValue": "reject",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bf08bfac-efd5-4ac2-b1ac-f8d51fe5d7be",
                    "leftValue": "={{ $json.value.action }}",
                    "rightValue": "edit",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        352,
        -64
      ],
      "id": "50ec0985-d1be-4df8-92c2-1810cc014c03",
      "name": "Switch action value"
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -48,
        -48
      ],
      "id": "48e37423-d067-425d-bb8c-a2e9ee901721",
      "name": "Respond to actions"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{ \"response_action\": \"clear\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        0,
        336
      ],
      "id": "938385f0-8dea-413e-b772-23e422dc3dc4",
      "name": "Respond to view"
    },
    {
      "parameters": {
        "operation": "delete",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09HB3US5J9",
          "mode": "list",
          "cachedResultName": "crop-caster"
        },
        "timestamp": "={{ $json.message_ts }}"
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1712,
        -32
      ],
      "id": "f4a9f18c-b1b9-445b-b44d-be77a81b2d6b",
      "name": "Delete a message",
      "webhookId": "be35cf04-67bd-44d1-85a0-9a3a2c801e62",
      "credentials": {
        "slackApi": {
          "id": "9ZfOUYa7935pkuZq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://slack.com/api/files.delete",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"file\": \"{{ $json.file_id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1712,
        -224
      ],
      "id": "d0ef0091-c2b3-4a5f-a421-996242fda3ab",
      "name": "HTTP Request",
      "credentials": {
        "slackApi": {
          "id": "9ZfOUYa7935pkuZq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const payload = $(\"Extract Payload\").first().json;\n\nvar result;\n\nif (payload.type == \"block_actions\") {\n  const actionValue = JSON.parse(payload.actions[0].value);\n  result = {\n    \"file_id\": actionValue.file_id,\n    \"message_ts\": payload.message.ts,\n  }\n} else if (payload.type == \"view_submission\") {\n  const modalValue = $(\"Extract modal values\").first().json.value;\n  result = {\n    \"file_id\": modalValue.file_id,\n    \"message_ts\": modalValue.message_ts,\n  }\n} else {\n  throw new Error(\"Workflow stopped due to unknown slack payload type.\");\n}\n\nreturn result"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1456,
        -128
      ],
      "id": "d1d726bd-d863-46bb-bb43-0072ec58a8ec",
      "name": "Clean slack"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "l3Ot7Z5JeVUM2j1R",
          "mode": "list",
          "cachedResultName": "Insert Processed Source"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "source_id": "={{ $json.source_id }}",
            "video_id": "={{ $json.video_id }}",
            "publish_date": "={{ $json.publish_date }}",
            "processing_date": "={{ $json.processing_date }}",
            "status": "={{ $json.status }}",
            "post_url": "={{ $json.post_url }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "source_id",
              "displayName": "source_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "video_id",
              "displayName": "video_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "post_url",
              "displayName": "post_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "publish_date",
              "displayName": "publish_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "processing_date",
              "displayName": "processing_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        880,
        -240
      ],
      "id": "40531154-4ef7-4390-94bc-f0bcd5d4af6c",
      "name": "Insert Processed Source"
    },
    {
      "parameters": {
        "jsCode": "const value = $input.first().json.value;\nvar video_id;\nvar post_url;\nvar publish_date;\n\nswitch (value.source.type) {\n  case \"youtube\":\n    video_id = value.video.videoId;\n    publish_date = value.video.pubDate;\n    break;\n  case \"news\":\n    post_url = value.post.url;\n    publish_date = new Date(value.post.publish_date).toISOString();\n    break;\n  default:\n    throw new Error('Unknown source type');\n}\n\nreturn [\n  {\n    source_id: value.source.source_id,\n    video_id: video_id,\n    post_url: post_url,\n    publish_date: publish_date,\n    processing_date: new Date().toISOString(),\n    status: 'rejected'\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        -48
      ],
      "id": "79804739-4f4f-424d-a33d-c68bc8463a33",
      "name": "Set rejected source"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "l3Ot7Z5JeVUM2j1R",
          "mode": "list",
          "cachedResultName": "Insert Processed Source"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "source_id": "={{ $json.source_id }}",
            "video_id": "={{ $json.video_id }}",
            "publish_date": "={{ $json.publish_date }}",
            "processing_date": "={{ $json.processing_date }}",
            "status": "={{ $json.status }}",
            "post_url": "={{ $json.post_url }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "source_id",
              "displayName": "source_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "video_id",
              "displayName": "video_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "post_url",
              "displayName": "post_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "publish_date",
              "displayName": "publish_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "processing_date",
              "displayName": "processing_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        880,
        -48
      ],
      "id": "5ee6bc8f-5848-466c-a988-46cbf629ef29",
      "name": "Insert Rejected Source"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "answeringly-unencysted-piper.ngrok-free.dev",
            "user-agent": "Slackbot 1.0 (+https://api.slack.com/robots)",
            "content-length": "36229",
            "accept": "application/json,*/*",
            "accept-encoding": "gzip,deflate",
            "content-type": "application/x-www-form-urlencoded",
            "x-forwarded-for": "34.234.95.71",
            "x-forwarded-host": "answeringly-unencysted-piper.ngrok-free.dev",
            "x-forwarded-proto": "https",
            "x-slack-request-timestamp": "1759720011",
            "x-slack-signature": "v0=a304ede030179dcf6d25694bb3d9fc51ea83df8f75c5d3685574d9ec025f92e1"
          },
          "params": {},
          "query": {},
          "body": {
            "payload": "{\"type\":\"view_submission\",\"team\":{\"id\":\"T0250NTDR7D\",\"domain\":\"personal-tio3269\"},\"user\":{\"id\":\"U024XEA9UUV\",\"username\":\"kamalelshazly92\",\"name\":\"kamalelshazly92\",\"team_id\":\"T0250NTDR7D\"},\"api_app_id\":\"A09HDKD6BGW\",\"token\":\"gWMghR6x11dKvO9ytLxLqZdY\",\"trigger_id\":\"9654669699313.2170775467251.4c0f7fd81c5cad05843876028265447f\",\"view\":{\"id\":\"V09JPAN8FQB\",\"team_id\":\"T0250NTDR7D\",\"type\":\"modal\",\"blocks\":[{\"type\":\"section\",\"block_id\":\"M4\\/nU\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Source:* Almolakhas Alektesady News|\\u0645\\u0648\\u0642\\u0639 \\u0627\\u0644\\u0645\\u0644\\u062e\\u0635 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a\\n*Video:* <https:\\/\\/almolakhasalektesady.com\\/%D8%A3%D8%B3%D8%B9%D8%A7%D8%B1-%D8%A7%D9%84%D8%A3%D8%B1%D8%B2-%D8%A7%D9%84%D8%B4%D8%B9%D9%8A%D8%B1-300-%D8%AC%D9%86%D9%8A%D9%87-%D8%AA%D8%B1%D8%A7%D8%AC%D8%B9-%D9%84%D9%84%D8%A3%D8%B3%D8%A8%D9%88\\/|\\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0634\\u0639\\u064a\\u0631.. 300 \\u062c\\u0646\\u064a\\u0647 \\u062a\\u0631\\u0627\\u062c\\u0639 \\u0644\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639 \\u0627\\u0644\\u062b\\u0627\\u0644\\u062b> \\n*Published:* 2025-09-26&gt;\",\"verbatim\":false}},{\"type\":\"divider\",\"block_id\":\"0zbXN\"},{\"type\":\"section\",\"block_id\":\"5gprs\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Transcript:*\",\"verbatim\":false}},{\"type\":\"input\",\"block_id\":\"results_block\",\"label\":{\"type\":\"plain_text\",\"text\":\"AI Results\",\"emoji\":true},\"optional\":false,\"dispatch_action\":false,\"element\":{\"type\":\"plain_text_input\",\"action_id\":\"results_input\",\"initial_value\":\"[\\n  {\\n    \\\"type\\\": \\\"broad_barely_rice\\\",\\n    \\\"min_price\\\": 15800,\\n    \\\"max_price\\\": 16300\\n  },\\n  {\\n    \\\"type\\\": \\\"small_barely_rice\\\",\\n    \\\"min_price\\\": 12300,\\n    \\\"max_price\\\": 12700\\n  },\\n  {\\n    \\\"type\\\": \\\"broad_white_rice\\\",\\n    \\\"min_price\\\": 24800,\\n    \\\"max_price\\\": 25200\\n  },\\n  {\\n    \\\"type\\\": \\\"small_white_rice\\\",\\n    \\\"min_price\\\": 18800,\\n    \\\"max_price\\\": 20200\\n  }\\n]\",\"multiline\":true,\"dispatch_action_config\":{\"trigger_actions_on\":[\"on_enter_pressed\"]}}},{\"type\":\"divider\",\"block_id\":\"n6c7y\"},{\"type\":\"section\",\"block_id\":\"60Odt\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"```\\u0634\\u0647\\u062f\\u062a \\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0634\\u0639\\u064a\\u0631[<https:\\/\\/almolakhasalektesady.com\\/%d8%a3%d8%b3%d8%b9%d8%a7%d8%b1-%d8%a7%d9%84%d8%a3%d8%b1%d8%b2-%d8%a7%d9%84%d8%b4%d8%b9%d9%8a%d8%b1-%d8%aa%d8%aa%d8%b1%d8%a7%d8%ac%d8%b9-600-%d8%ac%d9%86%d9%8a%d9%87-%d9%81%d9%8a-%d8%a3%d8%b3%d8%a8\\/>]\\u0648\\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0623\\u0628\\u064a\\u0636 \\u0648\\u0627\\u0644\\u0645\\u062e\\u0644\\u0641\\u0627\\u062a \\u0627\\u0644\\u0639\\u0644\\u0641\\u064a\\u0629 \\u0628\\u064a\\u0646 \\u0645\\u0637\\u0644\\u0639 \\u0627\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639 (\\u0627\\u0644\\u0633\\u0628\\u062a 20 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631 2025) \\u0648\\u0646\\u0647\\u0627\\u064a\\u062a\\u0647(\\u0627\\u0644\\u062e\\u0645\\u064a\\u0633 25 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631 2025)\\u060c \\u062a\\u063a\\u064a\\u0631\\u0627\\u062a \\u0645\\u0644\\u062d\\u0648\\u0638\\u0629 \\u062e\\u0644\\u0627\\u0644 \\u0627\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639 \\u0627\\u0644\\u062c\\u0627\\u0631\\u064a\\u060c \\u062d\\u064a\\u062b \\u062a\\u0631\\u0627\\u062c\\u0639\\u062a \\u0623\\u0633\\u0639\\u0627\\u0631\\u0627\\u0644\\u0634\\u0639\\u064a\\u0631 \\u0648\\u0627\\u0644\\u0623\\u0628\\u064a\\u0636 \\u0628\\u0634\\u0643\\u0644 \\u0645\\u062a\\u0641\\u0627\\u0648\\u062a \\u0628\\u064a\\u0646 \\u0628\\u062f\\u0627\\u064a\\u0629 \\u0627\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639 \\u0648\\u0646\\u0647\\u0627\\u064a\\u062a\\u0647\\u060c \\u0628\\u064a\\u0646\\u0645\\u0627 \\u0627\\u0633\\u062a\\u0642\\u0631\\u062a \\u0623\\u0633\\u0639\\u0627\\u0631\\u0627\\u0644\\u0645\\u062e\\u0644\\u0641\\u0627\\u062a \\u0627\\u0644\\u0639\\u0644\\u0641\\u064a\\u0629 \\u062f\\u0648\\u0646 \\u062a\\u063a\\u064a\\u064a\\u0631\\u0627\\u062a \\u062a\\u064f\\u0630\\u0643\\u0631\\u060c \\u0641\\u064a \\u0627\\u0646\\u0639\\u0643\\u0627\\u0633 \\u0645\\u0628\\u0627\\u0634\\u0631 \\u0644\\u062a\\u0648\\u0627\\u0632\\u0646\\u0627\\u062a \\u0627\\u0644\\u0639\\u0631\\u0636 \\u0648\\u0627\\u0644\\u0637\\u0644\\u0628\\u0648\\u062a\\u0643\\u0627\\u0644\\u064a\\u0641 \\u0627\\u0644\\u0646\\u0642\\u0644 \\u0648\\u0627\\u0644\\u062a\\u062e\\u0632\\u064a\\u0646.,\\u0641\\u0642\\u0631\\u0629 \\u0639\\u0646 \\u062a\\u063a\\u0637\\u064a\\u0629 \\u0645\\u0648\\u0642\\u0639 \\u0627\\u0644\\u0645\\u0644\\u062e\\u0635 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a,\\u0648\\u064a\\u0648\\u0627\\u0635\\u0644 \\u201c\\u0645\\u0648\\u0642\\u0639 \\u0627\\u0644\\u0645\\u0644\\u062e\\u0635 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a\\u201d \\u062a\\u063a\\u0637\\u064a\\u062a\\u0647 \\u0627\\u0644\\u0645\\u064a\\u062f\\u0627\\u0646\\u064a\\u0629 \\u0644\\u0631\\u0635\\u062f \\u062a\\u062d\\u0631\\u0643\\u0627\\u062a \\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0634\\u0639\\u064a\\u0631\\u0648\\u0627\\u0644\\u0623\\u0628\\u064a\\u0636 \\u0648\\u0627\\u0644\\u0645\\u062e\\u0644\\u0641\\u0627\\u062a \\u0627\\u0644\\u0639\\u0644\\u0641\\u064a\\u0629 \\u0628\\u0634\\u0643\\u0644 \\u0644\\u062d\\u0638\\u064a\\u060c \\u0628\\u0647\\u062f\\u0641 \\u062a\\u0632\\u0648\\u064a\\u062f \\u0627\\u0644\\u062a\\u062c\\u0627\\u0631 \\u0648\\u0627\\u0644\\u0645\\u0636\\u0627\\u0631\\u0628\\u064a\\u0646 \\u0648\\u0627\\u0644\\u0645\\u0632\\u0627\\u0631\\u0639\\u064a\\u0646\\u0628\\u0628\\u064a\\u0627\\u0646\\u0627\\u062a \\u062f\\u0642\\u064a\\u0642\\u0629 \\u062a\\u062f\\u0639\\u0645 \\u0642\\u0631\\u0627\\u0631\\u0627\\u062a\\u0647\\u0645 \\u0627\\u0644\\u0627\\u0633\\u062a\\u062b\\u0645\\u0627\\u0631\\u064a\\u0629 \\u0648\\u0627\\u0644\\u062a\\u0633\\u0648\\u064a\\u0642\\u064a\\u0629. \\u0648\\u062a\\u0639\\u062a\\u0645\\u062f \\u0627\\u0644\\u0645\\u0646\\u0635\\u0629 \\u0639\\u0644\\u0649 \\u0645\\u0635\\u0627\\u062f\\u0631\\u0645\\u064a\\u062f\\u0627\\u0646\\u064a\\u0629 \\u0645\\u0628\\u0627\\u0634\\u0631\\u0629\\u060c \\u0628\\u0645\\u0627 \\u064a\\u0639\\u0632\\u0632 \\u062f\\u0648\\u0631\\u0647\\u0627 \\u0643\\u0623\\u062f\\u0627\\u0629 \\u0645\\u0648\\u062b\\u0648\\u0642\\u0629 \\u0644\\u0641\\u0647\\u0645 \\u0627\\u062a\\u062c\\u0627\\u0647\\u0627\\u062a \\u0627\\u0644\\u0633\\u0648\\u0642 \\u0648\\u0645\\u062a\\u0627\\u0628\\u0639\\u0629 \\u0627\\u0644\\u062a\\u063a\\u064a\\u0631\\u0627\\u062a\\u0627\\u0644\\u064a\\u0648\\u0645\\u064a\\u0629 \\u0641\\u064a \\u0648\\u0627\\u062d\\u062f\\u0629 \\u0645\\u0646 \\u0623\\u0647\\u0645 \\u0627\\u0644\\u0633\\u0644\\u0639 \\u0627\\u0644\\u0627\\u0633\\u062a\\u0631\\u0627\\u062a\\u064a\\u062c\\u064a\\u0629 \\u0627\\u0644\\u0645\\u0631\\u062a\\u0628\\u0637\\u0629 \\u0628\\u0627\\u0644\\u0623\\u0645\\u0646 \\u0627\\u0644\\u063a\\u0630\\u0627\\u0626\\u064a \\u0627\\u0644\\u0645\\u0635\\u0631\\u064a.,\\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0634\\u0639\\u064a\\u0631,\\u0627\\u0644\\u0633\\u0628\\u062a 20 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631 * \\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 \\u062c\\u062f\\u064a\\u062f (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 16,100 \\u2013 16,300 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646 * \\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 12,500 \\u2013 12,700 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0627\\u0644\\u0633\\u0628\\u062a 20 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631,\\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 \\u062c\\u062f\\u064a\\u062f (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 16,100 \\u2013 16,300 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 \\u062c\\u062f\\u064a\\u062f (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 16,100 \\u2013 16,300 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 12,500 \\u2013 12,700 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 12,500 \\u2013 12,700 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0627\\u0644\\u062e\\u0645\\u064a\\u0633 25 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631 * \\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 \\u062c\\u062f\\u064a\\u062f (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 15,800 \\u2013 16,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646 * \\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 12,300 \\u2013 12,500 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0627\\u0644\\u062e\\u0645\\u064a\\u0633 25 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631,\\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 \\u062c\\u062f\\u064a\\u062f (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 15,800 \\u2013 16,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 \\u062c\\u062f\\u064a\\u062f (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 15,800 \\u2013 16,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 12,300 \\u2013 12,500 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u0648\\u0635\\u0644 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 12,300 \\u2013 12,500 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u062a\\u0635\\u0641\\u064a\\u0629,\\u062b\\u0628\\u0627\\u062a \\u0648\\u0627\\u0636\\u062d \\u062e\\u0644\\u0627\\u0644 \\u0627\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639 * \\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 (\\u062a\\u0635\\u0641\\u064a\\u0629): 680 \\u2013 700 \\u062c\\u0646\\u064a\\u0647 * \\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u062a\\u0635\\u0641\\u064a\\u0629): 650 \\u2013 670 \\u062c\\u0646\\u064a\\u0647,\\u062b\\u0628\\u0627\\u062a \\u0648\\u0627\\u0636\\u062d \\u062e\\u0644\\u0627\\u0644 \\u0627\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639,\\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 (\\u062a\\u0635\\u0641\\u064a\\u0629): 680 \\u2013 700 \\u062c\\u0646\\u064a\\u0647,\\u0634\\u0639\\u064a\\u0631 \\u0639\\u0631\\u064a\\u0636 (\\u062a\\u0635\\u0641\\u064a\\u0629): 680 \\u2013 700 \\u062c\\u0646\\u064a\\u0647,\\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u062a\\u0635\\u0641\\u064a\\u0629): 650 \\u2013 670 \\u062c\\u0646\\u064a\\u0647,\\u0634\\u0639\\u064a\\u0631 \\u0631\\u0641\\u064a\\u0639 (\\u062a\\u0635\\u0641\\u064a\\u0629): 650 \\u2013 670 \\u062c\\u0646\\u064a\\u0647,\\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0623\\u0628\\u064a\\u0636,\\u0627\\u0644\\u0633\\u0628\\u062a 20 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631 * \\u0623\\u0628\\u064a\\u0636 \\u0639\\u0631\\u064a\\u0636 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 25,000 \\u2013 25,200 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646 * \\u0623\\u0628\\u064a\\u0636 \\u0631\\u0641\\u064a\\u0639 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 20,000 \\u2013 20,200 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0627\\u0644\\u0633\\u0628\\u062a 20 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631,\\u0623\\u0628\\u064a\\u0636 \\u0639\\u0631\\u064a\\u0636 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 25,000 \\u2013 25,200 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0623\\u0628\\u064a\\u0636 \\u0639\\u0631\\u064a\\u0636 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 25,000 \\u2013 25,200 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0623\\u0628\\u064a\\u0636 \\u0631\\u0641\\u064a\\u0639 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 20,000 \\u2013 20,200 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0623\\u0628\\u064a\\u0636 \\u0631\\u0641\\u064a\\u0639 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 20,000 \\u2013 20,200 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0627\\u0644\\u062e\\u0645\\u064a\\u0633 25 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631 * \\u0623\\u0628\\u064a\\u0636 \\u0639\\u0631\\u064a\\u0636 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 24,800 \\u2013 25,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646 * \\u0623\\u0628\\u064a\\u0636 \\u0631\\u0641\\u064a\\u0639 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 18,800 \\u2013 19,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0627\\u0644\\u062e\\u0645\\u064a\\u0633 25 \\u0633\\u0628\\u062a\\u0645\\u0628\\u0631,\\u0623\\u0628\\u064a\\u0636 \\u0639\\u0631\\u064a\\u0636 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 24,800 \\u2013 25,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0623\\u0628\\u064a\\u0636 \\u0639\\u0631\\u064a\\u0636 ```\",\"verbatim\":false}},{\"type\":\"section\",\"block_id\":\"wqTJM\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"```(\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 24,800 \\u2013 25,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0623\\u0628\\u064a\\u0636 \\u0631\\u0641\\u064a\\u0639 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 18,800 \\u2013 19,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0623\\u0628\\u064a\\u0636 \\u0631\\u0641\\u064a\\u0639 (\\u0623\\u0631\\u0636 \\u0627\\u0644\\u0645\\u0636\\u0631\\u0628): 18,800 \\u2013 19,000 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,,\\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0645\\u062e\\u0644\\u0641\\u0627\\u062a \\u0627\\u0644\\u0639\\u0644\\u0641\\u064a\\u0629,\\u0627\\u0633\\u062a\\u0642\\u0631\\u0627\\u0631 \\u0645\\u0644\\u062d\\u0648\\u0638 \\u0637\\u0648\\u0627\\u0644 \\u0627\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639 * \\u0633\\u0631\\u0633 \\u0645\\u0637\\u062d\\u0648\\u0646: 2,200 \\u2013 2,400 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646 * \\u0643\\u0648\\u0646\\u0629: 13,400 \\u2013 13,600 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646 * \\u0643\\u0633\\u0631 \\u0646\\u0627\\u0639\\u0645: 13,500 \\u2013 13,700 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0627\\u0633\\u062a\\u0642\\u0631\\u0627\\u0631 \\u0645\\u0644\\u062d\\u0648\\u0638 \\u0637\\u0648\\u0627\\u0644 \\u0627\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639,\\u0633\\u0631\\u0633 \\u0645\\u0637\\u062d\\u0648\\u0646: 2,200 \\u2013 2,400 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0633\\u0631\\u0633 \\u0645\\u0637\\u062d\\u0648\\u0646: 2,200 \\u2013 2,400 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0643\\u0648\\u0646\\u0629: 13,400 \\u2013 13,600 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0643\\u0648\\u0646\\u0629: 13,400 \\u2013 13,600 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0643\\u0633\\u0631 \\u0646\\u0627\\u0639\\u0645: 13,500 \\u2013 13,700 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u0643\\u0633\\u0631 \\u0646\\u0627\\u0639\\u0645: 13,500 \\u2013 13,700 \\u062c\\u0646\\u064a\\u0647\\/\\u0637\\u0646,\\u062a\\u0635\\u0631\\u064a\\u062d\\u0627\\u062a \\u0645\\u064a\\u062f\\u0627\\u0646\\u064a\\u0629,\\u0642\\u0627\\u0644 \\u0631\\u0636\\u0627 \\u0645\\u0634\\u0631\\u0641\\u060c \\u0631\\u0626\\u064a\\u0633 \\u201c\\u0645\\u0636\\u0631\\u0628 \\u0623\\u0631\\u0632 \\u0627\\u0644\\u0645\\u0646\\u0635\\u0648\\u0631\\u201d\\u060c \\u0644\\u0640\\u201d\\u0627\\u0644\\u0645\\u064f\\u0644\\u062e\\u0635 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a\\u201d \\u0625\\u0646 \\u0627\\u0644\\u0633\\u0648\\u0642 \\u0645\\u0631\\u0651 \\u0628\\u062d\\u0627\\u0644\\u0629\\u062a\\u0631\\u0642\\u0628 \\u062d\\u0630\\u0631 \\u0645\\u0639 \\u062a\\u0631\\u0627\\u062c\\u0639 \\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0634\\u0639\\u064a\\u0631 \\u0648\\u0627\\u0644\\u0623\\u0628\\u064a\\u0636\\u060c \\u0645\\u0631\\u062c\\u0639\\u0627\\u064b \\u0627\\u0644\\u0627\\u0646\\u062e\\u0641\\u0627\\u0636 \\u0625\\u0644\\u0649 \\u0648\\u0641\\u0631\\u0629 \\u0627\\u0644\\u0645\\u0639\\u0631\\u0648\\u0636\\u0645\\u0646 \\u0627\\u0644\\u0645\\u062d\\u0635\\u0648\\u0644 \\u0627\\u0644\\u062c\\u062f\\u064a\\u062f \\u0645\\u0642\\u0627\\u0628\\u0644 \\u0628\\u0637\\u0621 \\u0646\\u0633\\u0628\\u064a \\u0641\\u064a \\u062d\\u0631\\u0643\\u0629 \\u0627\\u0644\\u0634\\u0631\\u0627\\u0621. \\u0648\\u0623\\u0643\\u062f \\u0623\\u0646 \\u062a\\u0643\\u0627\\u0644\\u064a\\u0641 \\u0627\\u0644\\u0646\\u0642\\u0644 \\u0648\\u0627\\u0644\\u062a\\u062e\\u0632\\u064a\\u0646\\u062a\\u0638\\u0644 \\u0639\\u0627\\u0645\\u0644\\u0627\\u064b \\u0636\\u0627\\u063a\\u0637\\u0627\\u064b \\u064a\\u062d\\u062f \\u0645\\u0646 \\u062a\\u0631\\u0627\\u062c\\u0639 \\u0623\\u0643\\u0628\\u0631 \\u0644\\u0644\\u0623\\u0633\\u0639\\u0627\\u0631.,\\u0627\\u0644\\u0623\\u0631\\u0632 \\u0633\\u0644\\u0639\\u0629 \\u0627\\u0633\\u062a\\u0631\\u0627\\u062a\\u064a\\u062c\\u064a\\u0629,\\u0627\\u0644\\u0623\\u0631\\u0632 \\u064a\\u0639\\u062f \\u0645\\u0646 \\u0623\\u0628\\u0631\\u0632 \\u0627\\u0644\\u0633\\u0644\\u0639 \\u0627\\u0644\\u0627\\u0633\\u062a\\u0631\\u0627\\u062a\\u064a\\u062c\\u064a\\u0629 \\u0641\\u064a \\u0645\\u0635\\u0631\\u060c \\u062d\\u064a\\u062b:,\\u064a\\u0634\\u0643\\u0644 \\u0645\\u0643\\u0648\\u0646\\u0627\\u064b \\u0631\\u0626\\u064a\\u0633\\u064a\\u0627\\u064b \\u0641\\u064a \\u063a\\u0630\\u0627\\u0621 \\u0627\\u0644\\u0623\\u0633\\u0631\\u060c \\u062e\\u0635\\u0648\\u0635\\u0627\\u064b \\u0627\\u0644\\u0631\\u064a\\u0641\\u064a\\u0629.,\\u064a\\u0634\\u0643\\u0644 \\u0645\\u0643\\u0648\\u0646\\u0627\\u064b \\u0631\\u0626\\u064a\\u0633\\u064a\\u0627\\u064b \\u0641\\u064a \\u063a\\u0630\\u0627\\u0621 \\u0627\\u0644\\u0623\\u0633\\u0631\\u060c \\u062e\\u0635\\u0648\\u0635\\u0627\\u064b \\u0627\\u0644\\u0631\\u064a\\u0641\\u064a\\u0629.,\\u064a\\u0639\\u0643\\u0633 \\u0627\\u0633\\u062a\\u0642\\u0631\\u0627\\u0631\\u0647 \\u0627\\u0633\\u062a\\u0642\\u0631\\u0627\\u0631\\u0627\\u064b \\u0641\\u064a \\u0627\\u0644\\u0623\\u0645\\u0646 \\u0627\\u0644\\u063a\\u0630\\u0627\\u0626\\u064a \\u0648\\u0627\\u0644\\u0623\\u0633\\u0639\\u0627\\u0631.,\\u064a\\u0639\\u0643\\u0633 \\u0627\\u0633\\u062a\\u0642\\u0631\\u0627\\u0631\\u0647 \\u0627\\u0633\\u062a\\u0642\\u0631\\u0627\\u0631\\u0627\\u064b \\u0641\\u064a \\u0627\\u0644\\u0623\\u0645\\u0646 \\u0627\\u0644\\u063a\\u0630\\u0627\\u0626\\u064a \\u0648\\u0627\\u0644\\u0623\\u0633\\u0639\\u0627\\u0631.,\\u064a\\u062a\\u0623\\u062b\\u0631 \\u0625\\u0646\\u062a\\u0627\\u062c\\u0647 \\u0628\\u0639\\u0648\\u0627\\u0645\\u0644 \\u062f\\u0627\\u062e\\u0644\\u064a\\u0629 \\u0645\\u062b\\u0644 \\u0627\\u0644\\u0633\\u064a\\u0627\\u0633\\u0627\\u062a \\u0627\\u0644\\u0632\\u0631\\u0627\\u0639\\u064a\\u0629 \\u0648\\u0627\\u0644\\u062a\\u062e\\u0632\\u064a\\u0646\\u060c \\u0648\\u062e\\u0627\\u0631\\u062c\\u064a\\u0629 \\u0645\\u062b\\u0644 \\u0623\\u0648\\u0636\\u0627\\u0639 \\u0633\\u0648\\u0642\\u0627\\u0644\\u062d\\u0628\\u0648\\u0628 \\u0627\\u0644\\u0639\\u0627\\u0644\\u0645\\u064a\\u0629.,\\u064a\\u062a\\u0623\\u062b\\u0631 \\u0625\\u0646\\u062a\\u0627\\u062c\\u0647 \\u0628\\u0639\\u0648\\u0627\\u0645\\u0644 \\u062f\\u0627\\u062e\\u0644\\u064a\\u0629 \\u0645\\u062b\\u0644 \\u0627\\u0644\\u0633\\u064a\\u0627\\u0633\\u0627\\u062a \\u0627\\u0644\\u0632\\u0631\\u0627\\u0639\\u064a\\u0629 \\u0648\\u0627\\u0644\\u062a\\u062e\\u0632\\u064a\\u0646\\u060c \\u0648\\u062e\\u0627\\u0631\\u062c\\u064a\\u0629 \\u0645\\u062b\\u0644 \\u0623\\u0648\\u0636\\u0627\\u0639 \\u0633\\u0648\\u0642\\u0627\\u0644\\u062d\\u0628\\u0648\\u0628 \\u0627\\u0644\\u0639\\u0627\\u0644\\u0645\\u064a\\u0629.,\\u062a\\u0623\\u062b\\u064a\\u0631 \\u0627\\u0644\\u062a\\u063a\\u064a\\u0631 \\u0627\\u0644\\u0645\\u0646\\u0627\\u062e\\u064a,\\u0625\\u0646\\u062a\\u0627\\u062c \\u0627\\u0644\\u0623\\u0631\\u0632 \\u064a\\u062a\\u0623\\u062b\\u0631 \\u0628\\u0634\\u0643\\u0644 \\u0645\\u0628\\u0627\\u0634\\u0631 \\u0628\\u0627\\u0644\\u062a\\u063a\\u064a\\u0631 \\u0627\\u0644\\u0645\\u0646\\u0627\\u062e\\u064a \\u0639\\u0628\\u0631:,\\u0646\\u0642\\u0635 \\u0645\\u064a\\u0627\\u0647 \\u0627\\u0644\\u0631\\u064a \\u0648\\u062a\\u0631\\u0627\\u062c\\u0639 \\u0627\\u0644\\u0645\\u0633\\u0627\\u062d\\u0627\\u062a \\u0627\\u0644\\u0645\\u0632\\u0631\\u0648\\u0639\\u0629.,\\u0646\\u0642\\u0635 \\u0645\\u064a\\u0627\\u0647 \\u0627\\u0644\\u0631\\u064a \\u0648\\u062a\\u0631\\u0627\\u062c\\u0639 \\u0627\\u0644\\u0645\\u0633\\u0627\\u062d\\u0627\\u062a \\u0627\\u0644\\u0645\\u0632\\u0631\\u0648\\u0639\\u0629.,\\u0632\\u064a\\u0627\\u062f\\u0629 \\u0627\\u0644\\u0622\\u0641\\u0627\\u062a \\u0646\\u062a\\u064a\\u062c\\u0629 \\u0627\\u0631\\u062a\\u0641\\u0627\\u0639 \\u0627\\u0644\\u062d\\u0631\\u0627\\u0631\\u0629.,\\u0632\\u064a\\u0627\\u062f\\u0629 \\u0627\\u0644\\u0622\\u0641\\u0627\\u062a \\u0646\\u062a\\u064a\\u062c\\u0629 \\u0627\\u0631\\u062a\\u0641\\u0627\\u0639 \\u0627\\u0644\\u062d\\u0631\\u0627\\u0631\\u0629.,\\u0645\\u062e\\u0627\\u0637\\u0631 \\u0627\\u0644\\u0641\\u064a\\u0636\\u0627\\u0646\\u0627\\u062a \\u0648\\u0627\\u0644\\u062c\\u0641\\u0627\\u0641.,\\u0645\\u062e\\u0627\\u0637\\u0631 \\u0627\\u0644\\u0641\\u064a\\u0636\\u0627\\u0646\\u0627\\u062a \\u0648\\u0627\\u0644\\u062c\\u0641\\u0627\\u0641.,\\u0647\\u0630\\u0627 \\u0627\\u0644\\u0648\\u0627\\u0642\\u0639 \\u064a\\u0641\\u0631\\u0636 \\u0636\\u0631\\u0648\\u0631\\u0629 \\u062a\\u0628\\u0646\\u064a \\u0646\\u0638\\u0645 \\u0631\\u064a \\u062d\\u062f\\u064a\\u062b\\u0629 \\u0648\\u0632\\u0631\\u0627\\u0639\\u0629 \\u0623\\u0635\\u0646\\u0627\\u0641 \\u0645\\u0642\\u0627\\u0648\\u0645\\u0629 \\u0644\\u0644\\u062d\\u0631\\u0627\\u0631\\u0629 \\u0648\\u0627\\u0644\\u0645\\u0644\\u0648\\u062d\\u0629\\u0644\\u0636\\u0645\\u0627\\u0646 \\u0627\\u0633\\u062a\\u062f\\u0627\\u0645\\u0629 \\u0627\\u0644\\u0625\\u0646\\u062a\\u0627\\u062c.,\\u0627\\u0644\\u0628\\u0639\\u062f \\u0627\\u0644\\u0627\\u062c\\u062a\\u0645\\u0627\\u0639\\u064a \\u0648\\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a,\\u0627\\u0644\\u0623\\u0631\\u0632 \\u062e\\u064a\\u0627\\u0631 \\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a \\u0644\\u0644\\u0623\\u0633\\u0631 \\u0645\\u062a\\u0648\\u0633\\u0637\\u0629 \\u0648\\u0645\\u062d\\u062f\\u0648\\u062f\\u0629 \\u0627\\u0644\\u062f\\u062e\\u0644.,\\u0627\\u0644\\u0623\\u0631\\u0632 \\u062e\\u064a\\u0627\\u0631 \\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a \\u0644\\u0644\\u0623\\u0633\\u0631 \\u0645\\u062a\\u0648\\u0633\\u0637\\u0629 \\u0648\\u0645\\u062d\\u062f\\u0648\\u062f\\u0629 \\u0627\\u0644\\u062f\\u062e\\u0644.,\\u0639\\u0646\\u0635\\u0631 \\u0623\\u0633\\u0627\\u0633\\u064a \\u0641\\u064a \\u0627\\u0644\\u0645\\u0646\\u0627\\u0633\\u0628\\u0627\\u062a \\u0648\\u0627\\u0644\\u0648\\u0644\\u0627\\u0626\\u0645.,\\u0639\\u0646\\u0635\\u0631 \\u0623\\u0633\\u0627\\u0633\\u064a \\u0641\\u064a \\u0627\\u0644\\u0645\\u0646\\u0627\\u0633\\u0628\\u0627\\u062a \\u0648\\u0627\\u0644\\u0648\\u0644\\u0627\\u0626\\u0645.,\\u0633\\u0644\\u0639\\u0629 \\u0645\\u062a\\u0639\\u062f\\u062f\\u0629 \\u0627\\u0644\\u0627\\u0633\\u062a\\u062e\\u062f\\u0627\\u0645\\u0627\\u062a \\u0641\\u064a \\u0627\\u0644\\u0645\\u0637\\u0628\\u062e \\u0627\\u0644\\u0645\\u0635\\u0631\\u064a.,\\u0633\\u0644\\u0639\\u0629 \\u0645\\u062a\\u0639\\u062f\\u062f\\u0629 \\u0627\\u0644\\u0627\\u0633\\u062a\\u062e\\u062f\\u0627\\u0645\\u0627\\u062a \\u0641\\u064a \\u0627\\u0644\\u0645\\u0637\\u0628\\u062e \\u0627\\u0644\\u0645\\u0635\\u0631\\u064a.,\\u062f\\u0648\\u0631 \\u0627\\u0644\\u0645\\u062e\\u0644\\u0641\\u0627\\u062a \\u0641\\u064a \\u062f\\u0639\\u0645 \\u0627\\u0644\\u0623\\u0639\\u0644\\u0627\\u0641,\\u0645\\u062e\\u0644\\u0641\\u0627\\u062a \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0645\\u062b\\u0644 \\u0627\\u0644\\u0643\\u0648\\u0646\\u0629 \\u0648\\u0627\\u0644\\u0633\\u0631\\u0633 \\u0648\\u0627\\u0644\\u0643\\u0633\\u0631 \\u062a\\u064f\\u0633\\u062a\\u062e\\u062f\\u0645 \\u0643\\u0645\\u062f\\u062e\\u0644 \\u0631\\u0626\\u064a\\u0633\\u064a \\u0641\\u064a \\u0635\\u0646\\u0627\\u0639\\u0629 \\u0627\\u0644\\u0623\\u0639\\u0644\\u0627\\u0641\\u060c \\u0645\\u0627\\u064a\\u062e\\u0641\\u0641 \\u0645\\u0646 \\u062a\\u0643\\u0644\\u0641\\u0629 \\u0627\\u0644\\u0625\\u0646\\u062a\\u0627\\u062c \\u0641\\u064a \\u0642\\u0637\\u0627\\u0639 \\u0627\\u0644\\u062f\\u0648\\u0627\\u062c\\u0646 \\u0648\\u0627\\u0644\\u0645\\u0627\\u0634\\u064a\\u0629\\u060c \\u0648\\u064a\\u0624\\u062b\\u0631 \\u0625\\u064a\\u062c\\u0627\\u0628\\u064a\\u0627\\u064b \\u0639\\u0644\\u0649 \\u0627\\u0644\\u0645\\u0633\\u062a\\u0647\\u0644\\u0643\\u0627\\u0644\\u0646\\u0647\\u0627\\u0626\\u064a \\u0639\\u0628\\u0631 \\u062e\\u0641\\u0636 \\u0627\\u0644\\u0636\\u063a\\u0648\\u0637 \\u0627\\u0644\\u062a\\u0636\\u062e\\u0645\\u064a\\u0629.,\\u0644\\u0644\\u0645\\u0632\\u064a\\u062f \\u0645\\u0646 \\u0627\\u0644\\u0623\\u062e\\u0628\\u0627\\u0631 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a\\u0629 \\u0648\\u0627\\u0644\\u0644\\u062d\\u0638\\u064a\\u0629 \\u062a\\u0627\\u0628\\u0639\\u0646\\u064b\\u0627 \\u0639\\u0644\\u0649 \\u0635\\u0641\\u062d\\u062a\\u0646\\u0627 \\u0639\\u0644\\u0649 \\u0641\\u064a\\u0633\\u064a\\u0648\\u0643 \\u0645\\u0646 \\u0647\\u0646\\u0627:[<https:\\/\\/www.facebook.com\\/almolakhasalektesady?locale=ar_AR>],\\u0645\\u0648\\u0642\\u0639 \\u0627\\u0644\\u0645\\u0644\\u062e\\u0635 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a \\u0647\\u0648 \\u0645\\u0646\\u0635\\u0629 \\u0625\\u0644\\u0643\\u062a\\u0631\\u0648\\u0646\\u064a\\u0629 \\u0644\\u062a\\u0632\\u0648\\u064a\\u062f \\u0627\\u0644\\u0645\\u0633\\u062a\\u062e\\u062f\\u0645\\u064a\\u0646 \\u0628\\u0645\\u0644\\u062e\\u0635\\u0627\\u062a \\u0634\\u0627\\u0645\\u0644\\u0629 \\u0644\\u0623\\u0647\\u0645\\u0627\\u0644\\u0623\\u062d\\u062f\\u0627\\u062b \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a\\u0629. \\u0627\\u0644\\u062a\\u064a \\u062a\\u0634\\u0647\\u062f\\u0647\\u0627 \\u0627\\u0644\\u0623\\u0633\\u0648\\u0627\\u0642 \\u0627\\u0644\\u0639\\u0627\\u0644\\u0645\\u064a\\u0629 \\u0648\\u0627\\u0644\\u0625\\u0642\\u0644\\u064a\\u0645\\u064a\\u0629.,\\u0648\\u064a\\u0647\\u062f\\u0641 \\u0645\\u0648\\u0642\\u0639 \\u0627\\u0644\\u0645\\u0644\\u062e\\u0635 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a \\u0625\\u0644\\u0649 \\u062a\\u0648\\u0641\\u064a\\u0631 \\u0645\\u0639\\u0644\\u0648\\u0645\\u0627\\u062a \\u062f\\u0642\\u064a\\u0642\\u0629 \\u0648\\u0645\\u0648\\u062c\\u0632\\u0629 \\u062d\\u0648\\u0644 \\u0627\\u0644\\u062a\\u0637\\u0648\\u0631\\u0627\\u062a\\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a\\u0629\\u060c \\u0645\\u0645\\u0627 \\u064a\\u0633\\u0647\\u0644 \\u0639\\u0644\\u0649```\",\"verbatim\":false}},{\"type\":\"section\",\"block_id\":\"jYlQZ\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"``` \\u0627\\u0644\\u0642\\u0631\\u0627\\u0621 \\u0641\\u0647\\u0645 \\u0627\\u0644\\u0623\\u062d\\u062f\\u0627\\u062b.```\",\"verbatim\":false}}],\"private_metadata\":\"{\\\"file_id\\\":\\\"F09KQ0218P2\\\",\\\"message_ts\\\":\\\"1759719512.330479\\\",\\\"source\\\":{\\\"_id\\\":\\\"68ddac7e37f50d8e384ce1ed\\\",\\\"source_id\\\":\\\"almolakhasalektesady_news\\\",\\\"name_ar\\\":\\\"\\u0645\\u0648\\u0642\\u0639 \\u0627\\u0644\\u0645\\u0644\\u062e\\u0635 \\u0627\\u0644\\u0627\\u0642\\u062a\\u0635\\u0627\\u062f\\u064a\\\",\\\"name_en\\\":\\\"Almolakhas Alektesady News\\\",\\\"type\\\":\\\"news\\\",\\\"url\\\":\\\"https:\\/\\/almolakhasalektesady.com\\\",\\\"options\\\":{\\\"query_params\\\":{\\\"s\\\":\\\"\\u0623\\u0631\\u0632\\\"}}},\\\"post\\\":{\\\"url\\\":\\\"https:\\/\\/almolakhasalektesady.com\\/%D8%A3%D8%B3%D8%B9%D8%A7%D8%B1-%D8%A7%D9%84%D8%A3%D8%B1%D8%B2-%D8%A7%D9%84%D8%B4%D8%B9%D9%8A%D8%B1-300-%D8%AC%D9%86%D9%8A%D9%87-%D8%AA%D8%B1%D8%A7%D8%AC%D8%B9-%D9%84%D9%84%D8%A3%D8%B3%D8%A8%D9%88\\/\\\",\\\"title\\\":\\\"\\u0623\\u0633\\u0639\\u0627\\u0631 \\u0627\\u0644\\u0623\\u0631\\u0632 \\u0627\\u0644\\u0634\\u0639\\u064a\\u0631.. 300 \\u062c\\u0646\\u064a\\u0647 \\u062a\\u0631\\u0627\\u062c\\u0639 \\u0644\\u0644\\u0623\\u0633\\u0628\\u0648\\u0639 \\u0627\\u0644\\u062b\\u0627\\u0644\\u062b\\\",\\\"publish_date\\\":\\\"2025-09-26\\\"}}\",\"callback_id\":\"review_modal\",\"state\":{\"values\":{\"results_block\":{\"results_input\":{\"type\":\"plain_text_input\",\"value\":\"[\\n  {\\n    \\\"type\\\": \\\"broad_barely_rice\\\",\\n    \\\"min_price\\\": 15800,\\n    \\\"max_price\\\": 16000\\n  },\\n  {\\n    \\\"type\\\": \\\"small_barely_rice\\\",\\n    \\\"min_price\\\": 12300,\\n    \\\"max_price\\\": 12500\\n  },\\n  {\\n    \\\"type\\\": \\\"broad_white_rice\\\",\\n    \\\"min_price\\\": 24800,\\n    \\\"max_price\\\": 25000\\n  },\\n  {\\n    \\\"type\\\": \\\"small_white_rice\\\",\\n    \\\"min_price\\\": 18800,\\n    \\\"max_price\\\": 19000\\n  }\\n]\"}}}},\"hash\":\"1759719962.MNzECzKK\",\"title\":{\"type\":\"plain_text\",\"text\":\"Review AI Data\",\"emoji\":true},\"clear_on_close\":false,\"notify_on_close\":false,\"close\":{\"type\":\"plain_text\",\"text\":\"Cancel\",\"emoji\":true},\"submit\":{\"type\":\"plain_text\",\"text\":\"Approve\",\"emoji\":true},\"previous_view_id\":null,\"root_view_id\":\"V09JPAN8FQB\",\"app_id\":\"A09HDKD6BGW\",\"external_id\":\"\",\"app_installed_team_id\":\"T0250NTDR7D\",\"bot_id\":\"B09HU9UEQHF\"},\"response_urls\":[],\"is_enterprise_install\":false,\"enterprise\":null}"
          },
          "webhookUrl": "http://localhost:5678/webhook/0cf71861-712a-4764-aadb-b76f81486167",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prices data": {
      "main": [
        [
          {
            "node": "Insert Prices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Prices": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set processed source": {
      "main": [
        [
          {
            "node": "Insert Processed Source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set slack modal data": {
      "main": [
        [
          {
            "node": "Send slack modal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map response": {
      "main": [
        [
          {
            "node": "Set slack modal data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file content": {
      "main": [
        [
          {
            "node": "Map response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Payload": {
      "main": [
        [
          {
            "node": "Switch payload type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch payload type": {
      "main": [
        [
          {
            "node": "Respond to actions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to view",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract action values": {
      "main": [
        [
          {
            "node": "Switch action value",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch action value": {
      "main": [
        [
          {
            "node": "Set prices data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set processed source",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set rejected source",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get file content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract modal values": {
      "main": [
        [
          {
            "node": "Set prices data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set processed source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to actions": {
      "main": [
        [
          {
            "node": "Extract action values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to view": {
      "main": [
        [
          {
            "node": "Extract modal values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete a message": {
      "main": [
        []
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Clean slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean slack": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Processed Source": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set rejected source": {
      "main": [
        [
          {
            "node": "Insert Rejected Source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Rejected Source": {
      "main": [
        [
          {
            "node": "Clean slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e61ba084-624d-4b53-bc54-a44ea1ffc062",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e0610107ac554f59b63883651795eb0400bfcc59bc18a9994fa27c06a3158c7b"
  },
  "id": "KLYEXkmYeJH4Gdlb",
  "tags": []
}